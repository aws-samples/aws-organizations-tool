AWSTemplateFormatVersion: '2010-09-09'
# Transform: AWS::Serverless-2016-10-31

Description: |
  Resources to perform IaC Organozation Formation

Parameters:
  BranchName:
    Type: String
    Default: main
  OrgAccessRoleName:
    Type: String
  CodeInitBucketName:
    Type: String



Resources:

  ArtifactsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub orgformation-artifacts-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256


  OrganisationConfigurationCodeCommit:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: Repository used to store the organisation configuration
      RepositoryName: !Sub organisation-configuration-${AWS::AccountId}
      Code:
          BranchName: !Ref BranchName
          S3: 
            Bucket: !Ref CodeInitBucketName
            Key: source.zip
  


################### Roles
  OrgAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref OrgAccessRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess


      
  OrgFormationCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: orgformationcodepipelinerole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - "sts:AssumeRole"
      Path: /
      Policies:
      - PolicyName: orgformationcodepipelinerole-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - codecommit:Get*
            - codecommit:List*
            - codecommit:UploadArchive
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - logs:CreateLogStream
            - s3:GetObject
            - s3:ListBucket
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource:
            - !Sub arn:aws:s3:::orgformation-artifacts-${AWS::AccountId}-${AWS::Region}/*
            - !Sub arn:aws:s3:::orgformation-artifacts-${AWS::AccountId}-${AWS::Region}
  


  OrgFormationCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: orgformationcodebuildrole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess ### to be removed
      Policies:  
      - PolicyName: orgformationcodebuildrole-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - 
            Effect: Allow
            Action:
              - codecommit:BatchGetRepositories
              - codecommit:Get*
              - codecommit:GitPull
              - codecommit:List*
              - codecommit:CancelUploadArchive
              - codecommit:UploadArchive  
              - codebuild:StartBuild
              - logs:CreateLogGroup 
              - logs:CreateLogStream
              - logs:PutLogEvents
              - iam:ListUsers
              - iam:ListGroups
              - iam:ListAccountAliases
              - iam:DeleteAccountAlias
              - iam:CreateAccountAlias
              - iam:GetRole
              - organizations:*
              - s3:GetObject
              - s3:ListBucket
              - sts:AssumeRole
              - states:SendTaskSuccess
              - states:SendTaskFailure
            Resource: "*"
          - 
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::orgformation-artifacts-${AWS::AccountId}-${AWS::Region}/*
              - !Sub arn:aws:s3:::orgformation-artifacts-${AWS::AccountId}-${AWS::Region}

################### Roles


##################### Code Build Projects (Linux)

  OrgFormationCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: orgformationcodebuildproject
      Description: Deploy organisation configuration
      ServiceRole: !GetAtt OrgFormationCodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: OrgAccessRole
            Value: !Ref OrgAccessRole
          - Name: BranchName
            Value: !Ref BranchName
          - Name: ArtifactsS3Bucket
            Value: !Ref ArtifactsS3Bucket
          - Name: OrganisationConfigurationCodeCommitName
            Value: !GetAtt OrganisationConfigurationCodeCommit.Name
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
              commands:
                - |

                  echo "install ..."
                  echo "BranchName:                               $BranchName"
                  echo "ArtifactsS3Bucket:                        $ArtifactsS3Bucket"
                  echo "CODEBUILD_SRC_DIR:                        $CODEBUILD_SRC_DIR"
                  echo "Current path:                             $(pwd)"
                  echo "OrgAccessRole:                            $OrgAccessRole"
                  echo "OrganisationConfigurationCodeCommitName:  $OrganisationConfigurationCodeCommitName"
                  ACCOUNT_ID=$(aws sts get-caller-identity | jq -c -r .Account)
                  echo "ACCOUNT_ID:                               $ACCOUNT_ID"
                  echo 'check git version'
                  git --version
                  echo 'update PIP'
                  pip install --upgrade pip
                  

                - |

                  echo "Deploy/Update orgformation stack"
                  aws cloudformation deploy \
                      --no-fail-on-empty-changeset \
                      --template-file ./automation/orgformation.yaml \
                      --stack-name "orgformation" \
                      --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM \

                - |

                  echo "install org-tool"
                  pip install -e ./
                  orgtool --version
                  orgtool --help
                                    
            pre_build:
              commands:
                - |

                  echo "pre build ..."
                  echo "check if ./organization/.orgtool is into the source / if not, git clone, reverse setup, git commit, then exit. next build will deploy for check"
                  if [ ! -d "./organization/.orgtool/root" ] 
                  then
                      echo "orgtool configuration is not yet setup into the ${OrganisationConfigurationCodeCommitName} repository." 

                      git config --global credential.helper '!aws codecommit credential-helper $@'
                      git config --global credential.UseHttpPath true
                      git config --global user.email "orgtoolconfigure@${ACCOUNT_ID}.aws"
                      git config --global user.name "orgtoolconfigure"

                      echo 'Install git-remote-codecommit'
                    	pip install git-remote-codecommit
                      git clone codecommit::${AWS_REGION}://${OrganisationConfigurationCodeCommitName} --branch ${BranchName}
                      # ls -R -lsa

                      cd ${OrganisationConfigurationCodeCommitName}
                      echo "current directory is $(pwd)"

                      HEAD_COMMIT_ID=$(git show -s HEAD --pretty=format:%H)
                      echo "HEAD_COMMIT_ID is $HEAD_COMMIT_ID"

                      orgtoolconfigure reverse-setup --template-dir "./spec_init_data.blank" --output-dir "./organization/.orgtool/root"  --master-account-id "${ACCOUNT_ID}" --org-access-role "${OrgAccessRole}" --exec

                      git add -A
                      git commit -a -m "Organization configuration initialized"
                      git push origin ${BranchName}

                  fi

                                   
            build:
              commands:
                - |
                  echo "build ..."
                  cd $CODEBUILD_SRC_DIR
                  if [ -d "./organization/.orgtool/root" ] 
                  then
                    echo "Organization found into the repo, then deploy the changes"
                    echo "############ apply:"

                    echo "##### run cmd: orgtoolaccounts create --config ./organization/.orgtool/root/config.yaml --exec"
                    orgtoolaccounts create --config ./organization/.orgtool/root/config.yaml --exec

                    echo "##### run cmd: orgtool organization --config ./organization/.orgtool/root/config.yaml --exec"
                    orgtool organization --config ./organization/.orgtool/root/config.yaml --exec

                    echo "##### run cmd: orgtoolaccounts update --config ./organization/.orgtool/root/config.yaml --exec"
                    orgtoolaccounts update --config ./organization/.orgtool/root/config.yaml --exec

                    echo "##### run cmd: orgtoolauth delegations --config ./organization/.orgtool/root/config.yaml --exec"
                    orgtoolauth delegations --config ./organization/.orgtool/root/config.yaml --exec

                  fi

            post_build:
              commands:
                - |
                  echo "post build ..."
                  
##################### Code Build Projects (Linux)


############### Pipeline

  OrgFormationCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RestartExecutionOnUpdate: false
      Name: orgformationcodepipeline
      RoleArn: !GetAtt OrgFormationCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsS3Bucket
      Stages: 
        - 
          Name: Source
          Actions:
            - 
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                OutputArtifactFormat: CODEBUILD_CLONE_REF
                BranchName: !Ref BranchName
                RepositoryName: !GetAtt OrganisationConfigurationCodeCommit.Name
                PollForSourceChanges: true
              RunOrder: 1
        - 
          Name: Deploy
          Actions:
            - 
              Name: Deploy
              ActionTypeId:
                Category: Build
                Provider: CodeBuild
                Owner: AWS
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: DeployArtifact
              Configuration:
                ProjectName: !Ref OrgFormationCodeBuildProject
              RunOrder: 1
############# Pipeline


################# Custom ressource management S3 BUcket
  EmptyS3BucketOnDeletionLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: S3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:List*
                  - s3:DeleteObject
                Resource: "*"
  EmptyS3BucketOnDeletionLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          def handler(event, context):
              print(event)
              print('boto version ' + boto3.__version__)
              # Globals
              responseData = {}
              ResponseStatus = cfnresponse.SUCCESS
              s3bucketName = event['ResourceProperties']['s3bucketName']
              if event['RequestType'] == 'Create':
                  responseData['Message'] = "Resource creation successful!"
              elif event['RequestType'] == 'Update':
                  responseData['Message'] = "Resource update successful!"
              elif event['RequestType'] == 'Delete':
                  # Need to empty the S3 bucket before it is deleted
                  s3 = boto3.resource('s3')
                  bucket = s3.Bucket(s3bucketName)
                  bucket.objects.all().delete()
                  responseData['Message'] = "Resource deletion successful!"
              cfnresponse.send(event, context, ResponseStatus, responseData)
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt EmptyS3BucketOnDeletionLambdaExecutionRole.Arn
  EmptyArtifactsS3BucketOnDeletionCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt EmptyS3BucketOnDeletionLambdaFunction.Arn
      s3bucketName: !Ref ArtifactsS3Bucket
################# Custom ressource management S3 BUcket

Outputs:
  OutputStackName:
    Description: Created stack name
    Value: !Ref AWS::StackName








